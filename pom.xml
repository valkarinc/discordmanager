<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.botmanager</groupId>
    <artifactId>discord-bot-manager</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <javafx.version>19.0.2.1</javafx.version>
        <jackson.version>2.15.2</jackson.version>
        <materialfx.version>11.13.5</materialfx.version>
        <kotlin.version>1.9.20</kotlin.version>
        <!-- Define the main class for the JPackage (this is for the Patcher launcher) -->
        <launcher.main.class>com.botmanager.patcher.Patcher</launcher.main.class>
        <!-- Define the main class for your Discord Bot Manager application (for javafx:run and shaded JAR) -->
        <main.app.class>com.botmanager.Launcher</main.app.class>
    </properties>

    <dependencies>
        <!-- JavaFX Controls -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- JavaFX FXML -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- Jackson for JSON parsing (needed by Patcher and potentially other parts of your app) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!-- Kotlin for JVM -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib-jdk8</artifactId>
            <version>${kotlin.version}</version>
        </dependency>

        <!-- MaterialFX for modern UI (optional) -->
        <dependency>
            <groupId>io.github.palexdev</groupId>
            <artifactId>materialfx</artifactId>
            <version>${materialfx.version}</version>
        </dependency>

        <!-- JUnit for testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.9.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Kotlin Maven Plugin - Compiles your Kotlin source files -->
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <configuration>
                            <sourceDirs>
                                <sourceDir>${project.basedir}/src/main/java</sourceDir>
                            </sourceDirs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>process-test-sources</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jvmTarget>17</jvmTarget>
                </configuration>
            </plugin>

            <!-- Maven Compiler Plugin - Compiles your Java source files -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>

            <!-- Maven JAR Plugin - Explicitly defined to ensure the main artifact is created -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version> <!-- Use a stable version -->
                <configuration>
                    <archive>
                        <manifest>
                            <!-- Important: Ensure this mainClass matches your application's entry point if you run this JAR directly -->
                            <!-- However, for the shaded JAR, the shade plugin's manifest transformer will override this. -->
                            <mainClass>${main.app.class}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>default-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- JavaFX Maven Plugin - Handles running the main app and building the native launcher -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.7</version>
                <configuration>
                    <!-- Default configuration for 'javafx:run' goal - points to your main application -->
                    <mainClass>${main.app.class}</mainClass>
                    <runtimePathOption>CLASSPATH</runtimePathOption>
                </configuration>
                <executions>
                    <!-- Execution for building the native launcher (Patcher) using jpackage -->
                    <execution>
                        <id>jpackage-launcher</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jlink</goal>
                            <goal>jpackage</goal>
                        </goals>
                        <configuration>
                            <!-- Main class for the native *launcher* (Patcher) -->
                            <mainClass>${launcher.main.class}</mainClass>
                            <jlinkExecutable>true</jlinkExecutable>
                            <noManPages>true</noManPages>
                            <noHeaderFiles>true</noHeaderFiles>
                            <stripDebug>true</stripDebug>
                            <launcher>DiscordBotManagerUpdater</launcher>
                            <jpackage>
                                <imageName>DiscordBotManagerUpdater</imageName>
                                <vendor>Valkarinc</vendor>
                                <icon>src/main/resources/icons/launcher_icon.icns</icon>
                                <installerType>dmg</installerType>
                                <appName>Discord Bot Manager Updater</appName>
                                <appVersion>${project.version}</appVersion>
                                <copyright>Copyright 2023 Valkarinc</copyright>
                                <vendor>Valkarinc</vendor>
                                <description>Launcher and Updater for Discord Bot Manager</description>
                            </jpackage>
                        </configuration>
                    </execution>
                    <!-- You can add other javafx-maven-plugin executions here if needed -->
                </executions>
            </plugin>

            <!-- Maven Assembly Plugin - REMOVED TO AVOID CONFLICTS WITH SHADE PLUGIN -->
            <!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>com.botmanager.util.Launcher</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            -->

            <!-- Maven Shade Plugin - Recommended for creating a single, runnable fat JAR of your main app. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>${main.app.class}</mainClass>
                                </transformer>
                            </transformers>
                            <finalName>${project.artifactId}-${project.version}</finalName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
